{"version":3,"sources":["Components/Card/Card.js","Components/Button/Button.js","Components/TextArea/TextArea.js","Components/SearchBar/SearchBar.js","View/Homepage/HomePage.js","View/Homepage/action.js","View/Homepage/constants.js","View.js","App.js","serviceWorker.js","View/Homepage/reducer.js","reducer.js","store.js","index.js","images/cached-black-18dp.svg"],"names":["PunlishedCards","this","props","title","body","className","source","React","Component","Button","onClick","label","TextArea","for","placeholder","value","onChange","errorMessage","SearchBar","data-provide","data-items","type","class","alt","src","Reset","Homepage","state","titleError","bodyError","posts","postList","page","displayCards","bind","map","post","undefined","setState","splice","addPosts","field","target","searchString","length","searchPost","filter","toLowerCase","includes","onSearch","onReset","handleChange","onPublish","connect","data","payload","View","path","exact","component","HomePage","App","Boolean","window","location","hostname","match","initialState","postListRequest","postListSuccess","postListFail","postReducer","action","rootReducer","combineReducers","PostReducer","persistConfig","key","storage","persistedReducer","persistReducer","store","createStore","applyMiddleware","thunk","persistor","persistStore","configureStore","ReactDOM","render","loading","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.36d7ddf0.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactMarkdown from \"react-markdown\";\r\nimport \"./Card.css\";\r\n\r\nclass PunlishedCards extends React.Component {\r\n\r\n    render() {\r\n        const { title, body } = this.props;\r\n        return (\r\n            <div className=\"cards\">\r\n                <div className=\"title\">\r\n                    {title}\r\n                </div>\r\n                <div>\r\n                    <ReactMarkdown source={body} />\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default PunlishedCards;","import React from \"react\";\r\nimport \"./Button.css\";\r\n\r\nfunction Button(props) {\r\n    return (\r\n        <button\r\n            onClick={props.onClick} >\r\n            {props.label}\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default Button;","import React from \"react\";\r\nimport \"./TextArea.css\";\r\n\r\nfunction TextArea(props) {\r\n    return (\r\n        <div className=\"dispGrid \">\r\n            <label for=\"title\">{props.title}</label>\r\n            <textarea\r\n                className={props.className}\r\n                placeholder={props.placeholder}\r\n                value={props.value}\r\n                onChange={props.onChange} />\r\n            <span className=\"errorMsg\">{props.errorMessage}</span>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TextArea;","import React from \"react\";\r\nimport \"./SearchBar.css\";\r\nimport Reset from \"../../images/cached-black-18dp.svg\";\r\n\r\nfunction SearchBar(props) {\r\n    return (\r\n        <div className=\"searchBar\">\r\n            <div className=\"searchButton\">\r\n                <input\r\n                    onChange={props.onChange}\r\n                    data-provide=\"typeahead\"\r\n                    data-items=\"4\"\r\n                    type=\"text\"\r\n                    value={props.value}\r\n                    class=\"search-query\"\r\n                    placeholder=\"search post by name\" />\r\n                <span>\r\n                    <button onClick={props.onClick}>\r\n                        <img alt=\"reset\" src={Reset} />\r\n                    </button>\r\n                </span>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBar;","import React from \"react\";\r\nimport Cards from \"../../Components/Card/Card\"\r\nimport Button from \"../../Components/Button/Button\";\r\nimport { connect } from \"react-redux\";\r\nimport { addPosts } from \"./action\";\r\nimport TextArea from \"../../Components/TextArea/TextArea\";\r\nimport SearchBar from \"../../Components/SearchBar/SearchBar\";\r\n\r\n\r\nclass Homepage extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            title: null,\r\n            body: null,\r\n            titleError: \"\",\r\n            bodyError: \"\",\r\n            posts: this.props.posts.postList,\r\n            page: \"form\"\r\n        }\r\n        this.displayCards = this.displayCards.bind(this);\r\n    }\r\n\r\n    displayCards() {\r\n        const { posts } = this.state;\r\n        return posts.map(post => {\r\n            return (\r\n                <Cards\r\n                    title={post.title}\r\n                    body={post.body}\r\n                />\r\n            )\r\n        })\r\n    }\r\n\r\n    onPublish() {\r\n        const { title, body } = this.state;\r\n        if (title === null || title === \"\" || title === undefined) {\r\n            this.setState({ titleError: \"please enter valid title\" });\r\n        }\r\n        else if (body === null || body === \"\" || body === undefined) {\r\n            this.setState({ bodyError: \"post cannot be empty\" });\r\n        }\r\n        else {\r\n            let posts = this.props.posts.postList;\r\n            posts.splice(0, 0, {\r\n                title, body\r\n            })\r\n            this.setState({ title: \"\", body: \"\" });\r\n            this.props.addPosts(posts);\r\n        }\r\n    }\r\n\r\n    handleChange(field, value) {\r\n        this.setState({ [field]: value.target.value, titleError: \"\", bodyError: \"\" });\r\n    }\r\n\r\n    onSearch(value) {\r\n        let searchString = value.target.value;\r\n        const { posts } = this.state;\r\n        if (searchString.length > 2) {\r\n            let searchPost = posts.filter(post => {\r\n                let title = post.title.toLowerCase()\r\n                let body = post.body.toLowerCase();\r\n                return title.includes(searchString) || body.includes(searchString);\r\n            })\r\n\r\n            this.setState({ posts: searchPost });\r\n        }\r\n    }\r\n\r\n    onReset() {\r\n        this.setState({ posts: this.props.posts.postList, searchString: \"\" })\r\n    }\r\n\r\n    render() {\r\n        const { title, body, titleError, bodyError, page, searchString } = this.state;\r\n        return (\r\n            <div>\r\n                <div>\r\n                    <SearchBar\r\n                        onChange={this.onSearch.bind(this)}\r\n                        onClick={this.onReset.bind(this)}\r\n                        value={searchString}\r\n                    />\r\n\r\n                    <div className=\"buttonsMain dispFlex\">\r\n                        <Button\r\n                            onClick={() => this.setState({ page: \"form\" })}\r\n                            label=\"New Post\"\r\n                        />\r\n                        <Button\r\n                            onClick={() => this.setState({ page: \"posts\" })}\r\n                            label=\"Published\"\r\n                        />\r\n\r\n                    </div>\r\n                </div>\r\n                <div className=\"main dispFlex\">\r\n                    {\r\n                        page === \"form\" ?\r\n\r\n                            <div className=\"form align-center\">\r\n\r\n                                <TextArea\r\n                                    title=\"Title\"\r\n                                    placeholder=\"Enter Title\"\r\n                                    value={title}\r\n                                    onChange={this.handleChange.bind(this, \"title\")}\r\n                                    errorMessage={titleError} />\r\n\r\n\r\n                                <TextArea\r\n                                    title=\"Body\"\r\n                                    className=\"postBody\"\r\n                                    placeholder=\"Enter\"\r\n                                    value={body}\r\n                                    errorMessage={bodyError}\r\n                                    onChange={this.handleChange.bind(this, \"body\")} />\r\n\r\n                                <div>\r\n                                    <Button\r\n                                        onClick={this.onPublish.bind(this)}\r\n                                        label=\"Publish\"\r\n                                    />\r\n                                </div>\r\n\r\n                            </div> : \"\"}\r\n                    <div className={page === \"form\" ? \"posts\" : \"visible\"}>\r\n                        {this.displayCards()}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps = state => {\r\n    return {\r\n        posts: state.posts\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, { addPosts })(Homepage);\r\n\r\n","import {\r\n    ADD_POSTS,\r\n\r\n} from \"./constants\";\r\n\r\n\r\n//listPost\r\n\r\nexport function addPosts(data) {\r\n    return {\r\n        type: ADD_POSTS,\r\n        payload: data\r\n    };\r\n}\r\n\r\n","export const ADD_POSTS = \"ADD_POSTS\";\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport HomePage from './View/Homepage/HomePage';;\r\n\r\n\r\nclass View extends Component {\r\n    render() {\r\n        return (\r\n            <div className=\"body\">\r\n                <Switch>\r\n                    <Route path=\"/\" exact component={HomePage} />\r\n                </Switch>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default View;","import React from 'react';\nimport { BrowserRouter } from \"react-router-dom\";\nimport './App.css';\nimport View from \"./View\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <View />\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n    ADD_POSTS,\r\n} from \"./constants\";\r\n\r\nconst initialState = {\r\n    postListRequest: false,\r\n    postListSuccess: false,\r\n    postListFail: false,\r\n    postList: [],\r\n    errorMessage: \"\",\r\n\r\n\r\n};\r\n\r\nconst postReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        case ADD_POSTS:\r\n            return {\r\n                ...state,\r\n                postListRequest: false,\r\n                postListSuccess: true,\r\n                postListFail: false,\r\n                postList: action.payload,\r\n                errorMessage: \"\",\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default postReducer;\r\n","import { combineReducers } from \"redux\";\r\nimport PostReducer from \"./View/Homepage/reducer\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    posts: PostReducer\r\n});\r\n\r\nexport default rootReducer;","import { createStore, applyMiddleware } from \"redux\";\r\nimport rootReducer from \"./reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport { persistStore, persistReducer } from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\n\r\nconst persistConfig = {\r\n    key: \"root\",\r\n    storage\r\n};\r\n\r\nconst persistedReducer = persistReducer(persistConfig, rootReducer);\r\n\r\nexport default function configureStore() {\r\n    let store = createStore(persistedReducer, applyMiddleware(thunk));\r\n    let persistor = persistStore(store);\r\n    return { store, persistor };\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from \"react-redux\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport configureStore from \"./store\";\nconst { store, persistor } = configureStore();\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <PersistGate loading={null} persistor={persistor}>\n      <App />\n    </PersistGate>\n  </Provider>,\n  document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/cached-black-18dp.28776c86.svg\";"],"sourceRoot":""}